# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca sync

# typed: true

module ParallelTests
  def self.bundler_enabled?; end
  def self.delta; end
  def self.determine_number_of_processes(count); end
  def self.first_process?; end
  def self.last_process?; end
  def self.now; end
  def self.number_of_running_processes; end
  def self.pid_file_path; end
  def self.pids; end
  def self.stop_all_processes; end
  def self.wait_for_other_processes_to_finish; end
  def self.with_pid_file; end
  def self.with_ruby_binary(command); end
end

class ParallelTests::CLI
  def run(argv); end

  private

  def any_test_failed?(test_results); end
  def append_test_options(options, argv); end
  def detailed_duration(seconds); end
  def execute_in_parallel(items, num_processes, options); end
  def execute_shell_command_in_parallel(command, num_processes, options); end
  def extract_file_paths(argv); end
  def extract_test_options(argv); end
  def final_fail_message; end
  def first_is_1?; end
  def handle_interrupt; end
  def load_runner(type); end
  def lock(lockfile); end
  def parse_options!(argv); end
  def report_failure_rerun_commmand(test_results, options); end
  def report_number_of_tests(groups); end
  def report_results(test_results, options); end
  def report_time_taken; end
  def reprint_output(result, lockfile); end
  def run_tests(group, process_number, num_processes, options); end
  def run_tests_in_parallel(num_processes, options); end
  def simulate_output_for_ci(simulate); end
  def use_colors?; end
end

class ParallelTests::Grouper
  def self.by_scenarios(tests, num_groups, options = _); end
  def self.by_steps(tests, num_groups, options); end
  def self.in_even_groups_by_size(items, num_groups, options = _); end
end

class ParallelTests::Pids
  def initialize(file_path); end

  def add(pid); end
  def all; end
  def count; end
  def delete(pid); end
  def file_path; end
  def mutex; end

  private

  def clear; end
  def pids; end
  def read; end
  def save; end
  def sync; end
end

ParallelTests::RUBY_BINARY = T.let(T.unsafe(nil), String)

ParallelTests::VERSION = T.let(T.unsafe(nil), String)

ParallelTests::Version = T.let(T.unsafe(nil), String)
